/*
 * SubproblemHandler.h
 *
 *  Created on: Nov 12, 2008
 *      Author: lars
 */

#ifndef SUBPROBLEMHANDLER_H_
#define SUBPROBLEMHANDLER_H_



#include "SearchSpace.h"

#ifdef PARALLEL_MODE

#include "debug.h"

//#include "pstream.h"

/*
 * Instances of this class handle one specific subproblem
 * generated by the search
 */
class SubproblemHandler {

protected:
  SearchSpace* m_space;
  SearchNode* m_subproblem;

public:

  // takes the next subproblem, takes care of its processing
  // (in whatever way, possibly on another machine) and
  // feeds the result back into the search space
  virtual void operator() () = 0;

public:
  SubproblemHandler(SearchSpace* p, SearchNode* n);

};


class SubproblemStraight : public SubproblemHandler{

public:
  void operator () ();

public:
  SubproblemStraight(SearchSpace*, SearchNode* n);

};

// Constructors
inline SubproblemHandler::SubproblemHandler(SearchSpace* p, SearchNode* n) :
  m_space(p), m_subproblem(n) {}

inline SubproblemStraight::SubproblemStraight(SearchSpace* p, SearchNode* n) :
  SubproblemHandler(p,n) {}

// just pushes a subproblem through to the propagator
inline void SubproblemStraight::operator() () {
  {
    GETLOCK(m_space->mtx_solved, lk);
    m_space->solved.push(m_subproblem);
    m_space->cond_solved.notify_one();
  }
}


#endif /* PARALLEL_MODE */

#endif /* SUBPROBLEMHANDLER_H_ */
